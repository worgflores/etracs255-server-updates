import com.rameses.annotations.*;

class BPDelinquencyTask {
	
	@DataContext('report_bpdelinquency') 
	def reportdb;

	@DataContext('report_bpdelinquency_item') 
	def reportitemdb;

	@Service('BusinessBillingService') 
	def billingSvc;

	@Schedule( interval=2 )
	public void processDraft( task ) {

		def o = reportdb.find([ state: 'DRAFT' ]).orderBy('dtfiled desc').first(); 
		if ( o ) reportdb.find([ objid: o.objid ]).update([ state: 'FOR-PROCESS' ]); 
	}

	@Schedule( interval=2 )
	public void execForProcess( task ) {

		def o = reportdb.find([ state: 'FOR-PROCESS' ]).orderBy('dtfiled desc').first(); 
		if ( o == null ) return; 

		reportdb.clearItems([ reportid: o.objid ]); 
		reportdb.build([ reportid: o.objid ]); 
		reportdb.updateHeader([ reportid: o.objid ]);
		reportdb.find([ objid: o.objid ]).update([ state: 'FOR-UPDATE']);
	} 

	private def numformatter = new java.text.DecimalFormat('0.00'); 


	@Schedule( interval=1 )
	public void execForUpdate( task ) {

		def o = reportdb.find([ state: 'FOR-UPDATE' ]).orderBy('dtfiled desc').first(); 
		if ( o == null ) return; 

		def billdate = null;
		def expirydate = null; 
		def params = [ state:'FOR-UPDATE', reportid: o.objid, _start:0, _limit:20, filter:'' ]; 
		def list = reportdb.getBuildItems( params ); 
		list.each{ 
			def ledger = reportdb.findLedger( it );
			def bill = getBilling( ledger ); 
			if ( bill ) {
				billdate = bill.billdate; 
				expirydate = bill.expirydate; 
				ledger.interest = (bill.interest ? bill.interest : 0.0 ); 
				ledger.interest = new java.math.BigDecimal( numformatter.format( ledger.interest )); 

				ledger.surcharge = (bill.surcharge ? bill.surcharge : 0.0 ); 
				ledger.surcharge = new java.math.BigDecimal( numformatter.format( ledger.surcharge )); 
				
				ledger.balance = ledger.amount - ledger.amtpaid; 
				ledger.total = ledger.balance + ledger.surcharge + ledger.interest; 

				it.amount  = ledger.amount;
				it.amtpaid = ledger.amtpaid; 
				it.surcharge = ledger.surcharge; 
				it.interest  = ledger.interest;
				it.balance   = ledger.balance;
				it.total     = ledger.total;
				it._allow_update = true; 
			} else {
				it._allow_update = false; 
			}
		} 
		list.findAll{( it._allow_update )}.each{
			reportitemdb.find([ objid: it.objid ]).update([
				amount  : it.amount, 
				amtpaid : it.amtpaid, 
				surcharge : it.surcharge, 
				interest  : it.interest, 
				balance   : it.balance, 
				total     : it.total
			]);	
		}
		reportdb.updateHeader([ reportid: o.objid ]); 

		def m = [:]; 
		if ( billdate ) m.billdate = billdate; 
		if ( expirydate ) m.expirydate = expirydate; 
		if ( !m.isEmpty()) { 
			reportdb.find([ objid: o.objid ]).update( m ); 			
		}

		if ( list ) {
			//do nothing 
		} else {
			reportdb.find([ objid: o.objid ]).update([ state:'COMPLETED' ]); 
		} 
	} 

	private def getBilling( o ) {
		try {
			def b = billingSvc.getBilling([ applicationid: o.applicationid ]); 
			def items = b.items.collect{[ interest: it.interest, surcharge: it.surcharge ]}  
			def interest = items.sum{( it.interest? it.interest: 0.0 )} 
			def surcharge = items.sum{( it.surcharge? it.surcharge: 0.0 )} 
			return [ 
				expirydate : b.expirydate, billdate : b.billdate,  
				interest : interest, surcharge : surcharge 
			]; 
		} catch(Throwable t) {
			return null; 
		}
	}
}