import com.rameses.annotations.*;
import com.rameses.common.*;

class ProvinceSyncMachSettingInterceptor
{   
	@Env
	def env 

	@Service('MachRYSettingService')
	def machSvc 

	@DataContext('rysetting_mach')
	def em_mach

	@DataContext('rysetting_lgu')
	def em_setting_lgu

	@DataContext('sys_org')
	def em_org



    @After(pattern="RPTMainSyncService.receive", eval="#{args[0].reftype == 'rysetting_mach' && 'SYNC-REVISION-SETTING'.equalsIgnoreCase(args[0].action)}") 
    public void syncSetting(evt){
    	def params = evt.args[0]
        def result = evt.result 

        checkValidOrg(params)

        result.settings = getSettings(params)
		result.status = 'OK'

		result.settings.each{setting ->
			setting.putAll(machSvc.open(setting))
			setting.assesslevels = machSvc.getAssessLevels(setting).each{lvl ->
						lvl.ranges = machSvc.getRanges(lvl)
					}
			
			setting.forexes = machSvc.getForexes(setting)
		}
	}

	def getSettings(params) {
		def settings = []

		def lgusettings = em_setting_lgu.find([lguid:params.orgid, settingtype:'mach']).list()
		lgusettings.each{
			def sdata = em_mach.find([objid:it.rysettingid, ry:params.ry]).first()
			if (sdata) {
				settings << sdata 
			}
		}

		if (!settings) {
			throw new Exception('Setting is not defined for revision year ' + params.ry + '.')
		}

		return settings 
	}

	void checkValidOrg(params) {
		def org = em_org.find([objid: params.orgid]).first()
		if (!org){
			throw new Exception('Organization ' + params.orgcode + ' is not defined.')
		}
	}

}