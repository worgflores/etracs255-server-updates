import com.rameses.annotations.*;
import com.rameses.common.*;

class ProvinceSyncLandSettingInterceptor
{   
	@Env
	def env 

	@Service('LandRYSettingService')
	def landSvc 

	@DataContext('rysetting_land')
	def em_land 

	@DataContext('rysetting_lgu')
	def em_setting_lgu

	@DataContext('sys_org')
	def em_org



    @After(pattern="RPTMainSyncService.receive", eval="#{args[0].reftype == 'rysetting_land' && 'SYNC-REVISION-SETTING'.equalsIgnoreCase(args[0].action)}") 
    public void syncSetting(evt){
    	def params = evt.args[0]
        def result = evt.result 

        checkValidOrg(params)

        result.settings = getSettings(params)
		result.status = 'OK'

		result.settings.each{setting ->
			setting.putAll(landSvc.open(setting))
			setting.assesslevels = landSvc.getAssessLevels(setting).each{ lvl ->
						lvl.ranges = landSvc.getRanges(lvl)
					}
			
			setting.specificclasses = landSvc.getSpecificClasses(setting, null).each{ spc ->
						spc.subclasses = landSvc.getSubClasses(spc)
					}
			
			setting.strippings = landSvc.getStrippings(setting, null)
			setting.adjustmenttypes = landSvc.getAdjustmentTypes(setting).each{
						it.classifications = landSvc.getAdjustmentClassifications(it)
					}
		}
	}

	def getSettings(params){
		def settings = []

		def lgusettings = em_setting_lgu.find([lguid:params.orgid, settingtype:'land']).list()
		lgusettings.each{
			def sdata = em_land.find([objid:it.rysettingid, ry:params.ry]).first()
			if (sdata) {
				settings << sdata 
			}
		}

		if (!settings) {
			throw new Exception('Setting is not defined for revision year ' + params.ry + '.')
		}

		return settings 
	}

	void checkValidOrg(params) {
		def org = em_org.find([objid: params.orgid]).first()
		if (!org){
			throw new Exception('Organization ' + params.orgcode + ' is not defined.')
		}
	}

}