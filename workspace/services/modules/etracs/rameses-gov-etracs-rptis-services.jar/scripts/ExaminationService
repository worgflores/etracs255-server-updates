import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.util.*;
import com.rameses.services.extended.*;
import com.rameses.custom.impl.*;


class ExaminationService
{
    @Env 
    def env 

	@ActiveDB('rpt_examination')
    def em

    @Service('DBImageService')
    def imageSvc 


    @ProxyMethod
    public def open(entity) {
        entity =  em.read(entity);
        if (!entity)
            throw new Exception('Record does not exist or has already been deleted.')
        if (!entity.inspectors)
            entity.inspectors = []
        try{
            entity.inspectors = JsonUtil.toObject(entity.inspectors)
        }
        catch(e){
            entity.inspectors = []
        }
        return entity;
    }


    @ProxyMethod
    public def getFindings(objid) {
        return em.getList([parentid:objid])
    }

    @ProxyMethod
    public void create( finding ) {
        convertListToString(finding)
        finding.inspectedby = [
            objid: env.USERID,
            name: env.NAME,
            title: env.JOBTITLE,
        ]
        em.create(finding)
    }

    @ProxyMethod
    public void update( finding ) {
        convertListToString(finding)
        em.update(finding)
    }

    @ProxyMethod
    public def save(entity) {
        try{
            open(entity)
            update(entity)
        }
        catch(e){
            create(entity)
        }        
    }    

    @ProxyMethod
    public void removeFinding(finding){
        def images = imageSvc.getImages([refid:finding.objid])
        images.each{
            imageSvc.deleteImage(it)
        }
        em.delete(finding)
    }

    void convertListToString(finding){
        try{
            finding.inspectors = JsonUtil.toString(finding.inspectors)
        }
        catch(e){
            finding.inspectors = []
        }
    }
}

