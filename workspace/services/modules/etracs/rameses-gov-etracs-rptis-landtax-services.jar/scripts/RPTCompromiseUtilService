import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;

class RPTCompromiseUtilService 
{
	@Service('NumberService')
	def numSvc
	
	@ActiveDB('rptcompromise_util')
	def em


	@ProxyMethod
	public void repostPaymentByTxnno(params) {
		def compromise = em.findCompromiseByTxnno(params)
		if (!compromise) throw new Exception('Compromise does not exist. Check txnno.')
		if (compromise.state != 'APPROVED') throw new Exception('Compromise is not yet approved.')
		if (compromise.amtpaid <= 0) throw new Exception('Compromise has no payment for reposting.')
		repostPayment(compromise)
	}

	@ProxyMethod
	public void repostPayment(compromise) {
		em.resetPayment(compromise)
		def pmt = em.findPayment(compromise)

		def payment = pmt.amtpaid 
		
		def items = em.getItems(compromise)
		if (items){
			for(int i = 0; i < items.size(); i++){
				def item = items[i]
				if (item.total <= payment){
					em.updateFullyPaidItem(item)
					payment -= item.total
				}
				else if(payment != 0) {
					computePartialPayment(payment, item)
					em.updatePartialledItem(item)
					payment = 0
				}

				if(payment == 0) break
			}
		}
	}

	void computePartialPayment(payment, item){
		item.fullypaid = 0
		item.paid = 0
		item.basicidlepaid 		= 0.0
		item.basicidleintpaid 	= 0.0
		item.firecodepaid 		= 0.0
		item.basicpaid 			= 0.0
		item.basicintpaid 		= 0.0
		item.sefpaid 			= 0.0
		item.sefintpaid 		= 0.0

		def idletaxtotal = item.basicidle + item.basicidleint 
		def linedue = 0;

		if (payment <= item.firecode + idletaxtotal){
			linedue = item.basicidle + item.basicidleint + item.firecode
			if (linedue > 0){
				item.basicidlepaid = numSvc.round( (item.basicidle / linedue) * payment )
				item.basicidleintpaid = numSvc.round( (item.basicidleint / linedue) * payment )
				item.firecodepaid = payment - (item.basicidlepaid + item.basicidleintpaid)
			}
			payment = 0.0 
		}
		else {
			item.basicidlepaid 		= item.basicidle
			item.basicidleintpaid 	= item.basicidleint
			item.firecodepaid 		= item.firecode 
			payment -= item.firecode + idletaxtotal
		}
		
		if (payment > 0.0){
			linedue = item.basic + item.basicint + item.sef + item.sefint

			item.basicpaid = numSvc.round( (item.basic / linedue) * payment )
			item.basicintpaid = numSvc.round( (item.basicint / linedue) * payment )
			item.sefpaid = numSvc.round( (item.sef / linedue) * payment )
			item.sefintpaid = payment - (item.basicpaid + item.basicintpaid + item.sefpaid )
		}
	}
}
