import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class LandTaxSMSService
{
	@Env 
	def env 

	@ActiveDB('landtax_sms')
	def em

	@Service('DateService')
	def dtSvc 

	@Service('RPTSmsService')
	def smsSvc

	@Service('RPTBillingService')
	def billSvc

	@Service('RPTBillingReportService')
	def billReportSvc

	@Service('NumberService')
	def numSvc


	/* return all unpaid ledgers for this client */
	@ProxyMethod
	public def getUnpaidLedgers(){
		def pdate = dtSvc.parseCurrentDate();
		def params = [
			cy   : pdate.year,
		]
		return 	em.getUnpaidLedgers(params)
	}


	@ProxyMethod
	public void sendTaxDueInfo(ledger){
		println 'sendTaxDueInfo -> ' + ledger.phoneno  

		billSvc.generateBillByLedger(ledger)
		def bill = em.findLatestBillByLedger(ledger)
		if (!bill) return
		bill = billReportSvc.getBilledLedger( bill )
		def discount = bill.basicdp + bill.sefdp 

		def msg = 'ADVISORY: Balance of your property TD No. ' + ledger.tdno + ' ' 
		
		if (discount < 0.0){
			discount = discount * (-1.0)
			def total = bill.basic + bill.sef + bill.firecode + bill.basicidle 
			msg += 'is P' + numSvc.format('#,##0.00', total) + '. '
			msg += 'Discount of P' + numSvc.format('#,##0.00', discount) + ' is availed '
			msg += 'if payment is made on or before ' + dtSvc.format('MMMM dd, yyyy', bill.validuntil) + '. '
		}
		else {
			msg += 'is P' + numSvc.format('#,##0.00', bill.total) + '. '
			msg += 'This is valid until ' + dtSvc.format('MMMM dd, yyyy', bill.validuntil) + '. '
			msg += 'Please pay ontime to avoid extra penalty.'
		}


		def smstext = [
			objid 		: 'SMS' + new java.rmi.server.UID(),
			phoneno		: ledger.phoneno,
			refid 		: ledger.objid,
			message		: msg,
			keyword 	: 'NOTIFY',
			retcode 	: 'OK',
		]
		smsSvc.send(smstext)
	}
}

