import com.rameses.annotations.*; 

class BusinessOnlineWorkflowInterceptor {

	@DataContext("business_application")
	def appEm;

	@Service(value="PartnerNotificationService", connection="gdx_proxy")
	def notifierSvc;

	@Service("OrgService")
	def orgSvc;

	@Service("NumberService")
	def numSvc;

	@Service("DateService")
	def dateSvc;

	@Service("BusinessCashReceiptService")
	def svc;

	@Service
	def self;

	private def generateBilling( def app ) {
		def r = [:];
    	r.app = [apptype:app.apptype, appyear:app.appyear, dtfiled:app.dtfiled, appno:app.appno]; 
    	r.billdate = dateSvc.getBasicServerDate();
    	r.applicationid = app.objid;

		def z = svc.getBillingForPayment( r ); 
        z.amount = numSvc.round( z.totals.total );
		return z;
	}

	@After(pattern="BusinessApplicationWorkflowService.signal", eval="#{result?.task?.state == 'payment' }", index=10 )
	public void notifyForPayment(def evt) {
		def e = evt.args[0];
		def result = evt.result;
		def a = appEm.find([objid: e.data.objid ]).first();
		def mobileno = a.business?.mobileno;
		if(!mobileno) mobileno = a.business?.owner?.mobileno; 

		// if(mobileno) {
		// 	def b = generateBilling( a ); 
		// 	def m = [:];
		// 	m.message = "Your business application is now ready for payment. Your amount due is " + b.amount;
		// 	m.orgcode = orgSvc.getRoot().code;
		// 	m.params = [appno: a.appno ];
		// 	m.txntype = 'bpls';
		// 	m.action = 'bill';
		// 	m.mobileno = mobileno;
		// 	self.sendSMS( m ); 
		// }
	}

	@Async 
	@ProxyMethod(local=true) 
	void sendSMS( m ) { 
		try { 
			notifierSvc.sendSMS( m ); 
		} catch(Throwable t) { 
			println 'failed to send SMS caused by '+ t.message; 
			t.printStackTrace(); 
		} 
	} 
}
