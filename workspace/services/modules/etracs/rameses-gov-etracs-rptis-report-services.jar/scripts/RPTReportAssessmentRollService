import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID

class RPTReportAssessmentRollService
{
    @ActiveDB('rptreport_assessmentroll')
    def em

    @ProxyMethod
    public def getCurrentRy(){
        return em.findCurrentRy()?.ry 
    }


    @Async
    @ProxyMethod
    public def generateAssessmentRollTaxable( params ){
    	params.barangayid = params.barangay?.objid
		def list = em.getAssessmentRollTaxable(params)
		if( ! list ) throw new Exception('Records not found.')
		return [reportdata:list]
    }

    
    @Async
    @ProxyMethod
    public def generateAssessmentRollExempt( params ){
    	params.barangayid = params.barangay?.objid
		def list = em.getAssessmentRollExempt(params)
		if( ! list ) throw new Exception('Records not found.')
		return [reportdata:list]
    }

    @Async
    @ProxyMethod
    public def generateContinuousAssessmentRoll( params ) {
        params.lguid = params.lgu.objid 
        params.barangayid = (params.barangay ? params.barangay.objid : '%')
        def list = em.getContinuousAssessmentRoll(params)
        if( ! list ) throw new Exception('Records not found.')
        return [reportdata:list]
    }

    @Async
    @ProxyMethod
    public def generateContinuousAssessmentRollExempt( params ) {
        params.lguid = params.lgu.objid 
        params.barangayid = (params.barangay ? params.barangay.objid : '%')
        def list = em.getContinuousAssessmentRollExempt(params)
        if( ! list ) throw new Exception('Records not found.')
        return [reportdata:list]
    }


}
