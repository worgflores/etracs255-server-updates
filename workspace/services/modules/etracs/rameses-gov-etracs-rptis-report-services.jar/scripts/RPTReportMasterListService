import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID

class RPTReportMasterListService
{
	@Env 
	def env 

    @ActiveDB('rptreport_masterlist')
    def em

    
    @DataContext('propertyclassification')
    def propertyclassification

    @DataContext('faas_previous')
    def em_faas_previous 


    @Service('DateService')
    def dtSvc 

    @Async
    @ProxyMethod
    public def getMasterListing( params ) {
    	params.lguid = (params.lgu ? params.lgu.objid :'%')
		params.barangayid = (params.barangay ? params.barangay.objid : '%')

		params.classidfilter = ''
		if( params.classification ) {
			params.classidfilter = ' AND r.classification_objid = $P{classid} '
		}

		params.sectionfilter = ''
		if( params.section ) { 
			params.sectionfilter = ' AND rp.section = $P{section} '
		}

		params.orderbyclause = ''
		if( params.orderby ) { 
			params.orderbyclause = 'ORDER BY ' + params.orderby.fieldname
		}

		
		def title = 'Master List of Real Property' 

		params.txntypeid = 'GR'
        params.txntypefilter = '' 
        if ('GR'.equalsIgnoreCase(params.reporttype)){
            params.txntypefilter = ' AND f.txntype_objid = $P{txntypeid} '
            title = 'General Revision Master List of Real Property'
        }
        else if ('MAINTENANCE'.equalsIgnoreCase(params.reporttype)){
            params.txntypefilter = ' AND f.txntype_objid <> $P{txntypeid} '  
            title = 'Maintenance Master List of Real Property' 
        }


		params.currentyear = dtSvc.serverYear
		params.classid = params.classification.objid 
		def list = em.getMasterListing(params)

		if( ! list ) throw new Exception('Record not found.')
		list.each{
			def prevlist = em_faas_previous.find([faasid:it.objid]).list()
            if (prevlist){
                it.prevowner = prevlist.prevowner.join(' / ')
                it.prevadministrator = prevlist.prevadministrator.join(' / ')
                it.prevmv = prevlist.prevmv.join(' / ')
                it.prevav = prevlist.prevmv.join(' / ')
            }

			if (it.administrator && it.administrator.name){
				it.owner.name = it.owner.name + '\nAdmin: ' + it.administrator.name 
			}
			
			if (!it.prevowner)
				it.prevowner = ''
				
			if (it.prevadministrator){
				it.prevowner += '\nAdmin: ' + it.prevadministrator 
			}
		}

		def forlguname = env.ORGCLASS + ' OF ' + env.ORGNAME 
		if (params.lgu) {
			forlguname = params.lgu.lgutype.toUpperCase() + ' OF ' + params.lgu.name 
		}

		def p = [
			CLASSIFICATION : params.classification.name,
            FORLGUNAME : forlguname,
            TITLE    : title,
        ]

		return [
			parameters  : p,
			reportdata 	: list
		]
    }

    @ProxyMethod
    public def getClassifications(){
    	return propertyclassification.find([state:'APPROVED']).orderBy('orderno').list()
    }


}
