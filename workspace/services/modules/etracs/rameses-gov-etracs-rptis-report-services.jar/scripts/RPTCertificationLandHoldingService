import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.common.*;

class RPTCertificationLandHoldingService 
{
    @ActiveDB('rptcertification')
    def em;

    @Service('RPTCertificationService')
    def certSvc 

	
	@ProxyMethod
	public def createCertification( cert ) {
		certSvc.createCertification(cert)
		certSvc.buildFilter(cert)
		em.insertLandHoldingItems(cert)
		cert.items = getLandHoldingItems(cert)
		certSvc.buildFootNotes(cert)
		certSvc.makeHtmlSafe(cert)
		return cert 
	}

	@ProxyMethod
	public def createLandHoldingWithImprovement(cert){
		certSvc.createCertification(cert)
		certSvc.buildFilter(cert)
		em.insertLandHoldingWithImprovementItems(cert)
		cert.items = getLandHoldingItems(cert)
		certSvc.buildFootNotes(cert)
		certSvc.makeHtmlSafe(cert)
		return cert 
	}

	@ProxyMethod
	public def createLandHoldingWithNoImprovement( cert ) {
		certSvc.createCertification(cert)
		certSvc.buildFilter(cert)
		em.insertLandHoldingWithNoImprovementItems(cert)
		cert.items = getLandHoldingItems(cert)
		certSvc.buildFootNotes(cert)
		certSvc.makeHtmlSafe(cert)
		return cert 
	}


	@ProxyMethod
	public def openCertification(objid) {
		def cert = certSvc.openCertification(objid)
		if (! cert ) 
			throw new Exception('Certification does not exist or has already been deleted.')
		cert.items = getLandHoldingItems(cert)
		certSvc.buildFootNotes(cert)
		return cert 
	}


	def getLandHoldingItems(cert)
	{
		def items = em.getLandHoldingItems(cert).each{
			it.street = (it.street ? it.street : it.barangay)
			it.description = 'LOT ' + it.cadastrallotno
		}

		if (!items) 
			throw new Exception('There are no land properties registered for this taxpayer.')

		return items
	}

}
