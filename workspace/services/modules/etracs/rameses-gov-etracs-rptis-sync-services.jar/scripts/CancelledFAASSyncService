import com.rameses.annotations.*
import com.rameses.util.*
import com.rameses.services.extended.*

class CancelledFAASSyncService
{
	@Env
	def env 

	@Service('DateService')
    def dtSvc

	@Service('RPTMainSyncService')
	def syncSvc 

    @Service('RPTSyncService')
    def rptSync

    @Service('RPTSyncSupport')
    def support

    @Service('CancelledFAASService')
    def svc

	@Service('CancelledFAASWorkflowService')
	def workflowSvc

    @DataContext('cancelledfaas')
    def em_cancelledfaas

    @DataContext('cancelledfaas_signatory')
    def em_signatory

    @DataContext('cancelledfaas_task')
    def em_task
	

	/*---------------------------------------------------------
	*
	* SCHEDULING SYNC SUPPORT 
	*
	---------------------------------------------------------*/
	
	@ProxyMethod
	public void scheduleManualApproved(cancelledfaas){
		def dtfiled = dtSvc.serverDate
        def remoteOrg = rptSync.getRemoteOrg(cancelledfaas)
        def idx = 1
        syncSvc.schedule(cancelledfaas.objid, cancelledfaas.objid, 'cancelledfaas', 'CANCELLEDFAAS-MANUAL-APPROVED', dtfiled, idx, remoteOrg)
        scheduleSharedData(cancelledfaas, dtfiled, remoteOrg, idx)
	}

	@ProxyMethod
	public void scheduleSubmitToProvince(cancelledfaas){
		def dtfiled = dtSvc.serverDate
        def remoteOrg = rptSync.getRemoteOrg(cancelledfaas)
        def idx = 1
        syncSvc.schedule(cancelledfaas.objid, cancelledfaas.objid, 'cancelledfaas', 'CANCELLEDFAAS-FORAPPROVAL', dtfiled, idx, remoteOrg)
        scheduleSharedData(cancelledfaas, dtfiled, remoteOrg, idx)
	}	

	@ProxyMethod
	public void scheduleOnlineApproved(cancelledfaas){
		def dtfiled = dtSvc.serverDate
        def remoteOrg = rptSync.getRemoteOrg(cancelledfaas)
        syncSvc.schedule(cancelledfaas.objid, cancelledfaas.objid, 'cancelledfaas', 'CANCELLEDFAAS-ONLINE-APPROVED', dtfiled, 1, remoteOrg)
	}	

	void scheduleSharedData(cancelledfaas, dtfiled, remoteOrg, idx) {
    	rptSync.scheduleExaminations(cancelledfaas.objid, 'cancelledfaas', dtfiled, remoteOrg, idx)
    	rptSync.scheduleRequirements(cancelledfaas.objid, 'cancelledfaas', dtfiled, remoteOrg, idx)
    }	

	
	/*---------------------------------------------------------
	* SEND/RECEIVE HANDLERS 
	---------------------------------------------------------*/
	@ProxyMethod
	public void send(syncdata) {
		rptSync.send(syncdata, getActions())
	}

	@ProxyMethod
	public void receive(syncdata) {
		rptSync.receive(syncdata, getActions())
	}

	def getActions(){
		return  [
	    	'CANCELLEDFAAS-MANUAL-APPROVED': [send: getData, receive: saveApprovedData],
	    	'CANCELLEDFAAS-FORAPPROVAL': [send: getData, receive: saveDataForApproval],
	    	'CANCELLEDFAAS-ONLINE-APPROVED': [send: getData, receive: postOnlineApproval],
	    ]
	}

	/*---------------------------------------------------------
	* SUPPORT METHODS
	---------------------------------------------------------*/
	def getData = {cancelledfaas ->
		cancelledfaas.putAll(svc.open(cancelledfaas))

		cancelledfaas.tasks = em_task.where('refid = :objid and enddate is not null', cancelledfaas)
										.orderBy('startdate').list()

		cancelledfaas.signatory = em_signatory.read(cancelledfaas)

		if (!cancelledfaas.signatory) 
			cancelledfaas.signatory = [:]

		return cancelledfaas 
	}



	def saveApprovedData = {syncdata ->
		def cancelledfaas = syncdata.data 
		def cf = em_cancelledfaas.find([objid: cancelledfaas.objid]).first()
		if (!cf) {
			cancelledfaas.state = 'FORAPPROVAL'
			svc.create(cancelledfaas)
		}
		svc.postRemoteApproval(cancelledfaas)
	}

	def saveDataForApproval = {syncdata ->
		def cancelledfaas = syncdata.data 

		def cf = em_cancelledfaas.find([objid: cancelledfaas.objid]).first()
		if (!cf) {
			svc.create(cancelledfaas)
		} else {
			svc.update(cancelledfaas)
		}

		cancelledfaas.tasks.each {
			em_task.save(it)
		}

		em_signatory.save(cancelledfaas.signatory)
		startWorkflow(syncdata, cancelledfaas)
	}

	def postOnlineApproval = {syncdata ->
		def cancelledfaas = syncdata.data 
		svc.postRemoteApproval(cancelledfaas)
	}


	void startWorkflow(syncdata, cancelledfaas){
		def tasks = workflowSvc.start([refid:cancelledfaas.objid, data:cancelledfaas])
		if (tasks)
			cancelledfaas.taskid = tasks[0].objid

		notifyGroup(syncdata, cancelledfaas)
	}

	void notifyGroup(syncdata, cancelledfaas){
        def param = [:]
        param.objid = cancelledfaas.objid 
        param.sender = syncdata.sender
        param.recipientid = 'assign-receiver'
        param.filetype = 'cancellefaas'
        param.msg = 'FAAS Cancellation No. ' + cancelledfaas.txnno + ' (assign-receiver) submitted by ' + syncdata.sender.name + '.'
        param.taskid = cancelledfaas.taskid 
        support.notifyGroup(param)
	}
}
 