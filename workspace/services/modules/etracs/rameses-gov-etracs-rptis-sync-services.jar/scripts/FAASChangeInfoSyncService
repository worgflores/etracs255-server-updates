import com.rameses.annotations.*
import com.rameses.util.*
import com.rameses.services.extended.*

class FAASChangeInfoSyncService
{
	@Env
	def env 

	@Service('DateService')
    def dtSvc

	@Service('RPTMainSyncService')
	def syncSvc 

    @Service('RPTSyncService')
    def rptSync

    @Service('RPTSyncSupport')
    def support

    @Service('FAASChangeInfoService')
    def svc



	/*---------------------------------------------------------
	*
	* SCHEDULING SYNC SUPPORT 
	*
	---------------------------------------------------------*/

	@ProxyMethod
	public void schedulePostChangeInfo(changeinfo){
		svc.checkAndUpdateLgu(changeinfo)
		def dtfiled = dtSvc.serverDate
        def remoteOrg = rptSync.getRemoteOrg(changeinfo)
        def idx = 1
        syncSvc.schedule(changeinfo.objid, changeinfo.objid, 'faaschangeinfo', 'FAAS-CHANGEINFO-POST', dtfiled, idx, remoteOrg)
        scheduleSharedData(changeinfo, dtfiled, remoteOrg, idx)
	}

	void scheduleSharedData(changeinfo, dtfiled, remoteOrg, idx) {
    	rptSync.scheduleImages(changeinfo.objid, 'faaschangeinfo', dtfiled, remoteOrg, idx)
    	rptSync.scheduleImages(changeinfo.refid, 'faaschangeinfo', dtfiled, remoteOrg, idx)
    }	

	
	/*---------------------------------------------------------
	*
	* SEND/RECEIVE HANDLERS 
	*
	---------------------------------------------------------*/
	@ProxyMethod
	public void send(syncdata) {
		rptSync.send(syncdata, getActions())
	}

	@ProxyMethod
	public void receive(syncdata) {
		rptSync.receive(syncdata, getActions())
	}

	def getActions(){
		return  [
	    	'FAAS-CHANGEINFO-POST': [send: getChangeInfo, receive: postChangeInfo],
	    ]
	}

	/*---------------------------------------------------------
	*
	* SUPPORT METHODS
	*
	---------------------------------------------------------*/
	def getChangeInfo = {changeinfo ->
		return svc.open(changeinfo)
	}

	def postChangeInfo = {syncdata ->
		def changeinfo = syncdata.data 
		changeinfo.remote = true 
		svc.updateInfo(changeinfo)
	}

}
 