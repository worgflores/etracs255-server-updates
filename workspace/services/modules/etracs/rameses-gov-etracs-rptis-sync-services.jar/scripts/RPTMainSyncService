import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class RPTMainSyncService {
	@Env 
	def env 

	@Context 
	def appCtx

	@Service()
	def self 

	@Service(value='SyncCoordinatorService', connection='coordinator-script-service')
    def coordinator 

    @Service('DateService')
    def dtSvc 

    @Service('Var')
    def var

	@DataContext('sync_data')
	def em_sync

	@DataContext('sync_data_forprocess')
	def em_sync_forprocess

	@DataContext('sync_data_pending')
	def em_sync_pending


	@ProxyMethod
	public void sendAsyncData(syncdata){
		try {
			self.asyncSend(syncdata)
			completed(syncdata)
		}
		catch(e){
			moveToPending(syncdata, e)
		}
	}


	/*-------------------------------------
	*
	* Intercepted by implementors to build 
	* the actual data to send to remote 
	*
	--------------------------------------*/
	@ProxyMethod
	public def asyncSend(syncdata){
		return syncdata
	}

	/*-------------------------------------
	*
	* directly send data to coordinator
	*
	--------------------------------------*/
	@ProxyMethod
	public def send(syncdata){
		println syncdata.action + ' sent.'
		return coordinator.send(syncdata)
	}

	@ProxyMethod
	public def send2(syncdata, data){
		if (data) {
			println syncdata.action + ' sent.'
			syncdata.data = data 
			return coordinator.send(syncdata)	
		}
		return null 
	}


	/*-------------------------------------
	*
	* to be intercepted by receivers
	* use args[0] to access actual data
	--------------------------------------*/
	@ProxyMethod
	public def receive(syncdata){
		//can be overriden by interceptor to
		//return specific data 
		println syncdata.action + ' received.'
		return [:]
	}

	@ProxyMethod
	public def create(data) {
		data.sender = [objid: env.USERID, name: env.FULLNAME]
		data.orgid = env.ORGID
		em_sync.create(data)
		em_sync_forprocess.create(data)
		return data 
	}

	@ProxyMethod
	public def schedule(parentid, refid, reftype, action, dtfiled, idx, remote) {
		if (isV254Notification(remote)){
			println 'Remote LGU ' + remote + ' is currently using v254 notification'
			return
		}

		def data = [:]
		data.parentid = parentid
        data.refid = refid
        data.reftype = reftype
        data.action = action
        data.dtfiled = dtfiled
        data.idx = idx 
        data.remote = remote 
        return create(data)
	}


	@ProxyMethod
	public def getForProcessItems(){
		return em_sync.where('forprocess.objid is not null')
				.orderBy('dtfiled, idx')
				.limit(25)
				.list()
	}

	@ProxyMethod
	public def getPendingItems(syncdata){
		def filter = 'pending.objid is not null'

		if (syncdata.orgid) {
			filter = 'orgid = :orgid and pending.objid is not null'
		}

		return em_sync.where(filter, syncdata)
				.orderBy('dtfiled')
				.limit(25)
				.list()
	}

	@ProxyMethod
	public void movePendingToForProcess(){
		def pendings = em_sync.where('pending.objid is not null and expirydate <= :currdate', [currdate: dtSvc.serverDate])
				.orderBy('dtfiled')
				.limit(25)
				.list()

		pendings.each{
			em_sync_forprocess.create(it)
			em_sync_pending.delete(it)
		}
	}


	void completed(data){
		em_sync_forprocess.delete(data)
		em_sync_pending.delete(data)
		em_sync.delete(data)
	}

	void moveToPending(syncdata, err){
		syncdata.error = err.message 
		syncdata.expirydate = dtSvc.add(dtSvc.serverDate, '1m')
		em_sync_pending.save(syncdata)
		em_sync_forprocess.delete(syncdata)
		println 'SyncService [ERROR] : ' + err.message 
	}

	def isV254Notification(remote) {
        def lgus = var.assessor_v254_notification_lgus
        println 'lgus => ' + lgus
        if (lgus) {
            def tokens = lgus.split(',')
            println 'remote => ' + remote
            println 'tokens => ' + tokens
            for ( int i=0; i < tokens.length; i++) {
                def token = tokens[i]            
                if (token.replaceAll('-', '').trim() == remote.orgid.replaceAll('-', '') ) {
                    return true
                }
            }
        }
        return false
    }

}

