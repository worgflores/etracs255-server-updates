import com.rameses.annotations.*
import com.rameses.util.*
import com.rameses.services.extended.*

class RedFlagSyncService
{
	@Env
	def env 

	@Service('DateService')
    def dtSvc

	@Service('RPTMainSyncService')
	def syncSvc 

    @Service('RPTSyncService')
    def rptSync

    @Service('RPTSyncSupport')
    def support

    @Service('RPTRedFlagService')
    def svc

	@Service('RPTUtil')
    def util


	/*---------------------------------------------------------
	*
	* SCHEDULING SYNC SUPPORT 
	*
	---------------------------------------------------------*/
	
	@ProxyMethod
	public void scheduleSubmitToMunicipality(redflag){
		def dtfiled = dtSvc.serverDate
        def remoteOrg = rptSync.getRemoteOrg(redflag)
        def idx = 1
        syncSvc.schedule(redflag.objid, redflag.objid, 'redflag', 'REDFLAG-FOR-MUNICIPALITY', dtfiled, idx++, remoteOrg)
	}

	@ProxyMethod
	public void scheduleResolvedRedFlag(redflag){
		def dtfiled = dtSvc.serverDate
        def remoteOrg = rptSync.getRemoteOrg(redflag)
        def idx = 1
        syncSvc.schedule(redflag.objid, redflag.objid, 'redflag', 'REDFLAG-RESOLVED', dtfiled, idx++, remoteOrg)
        rptSync.scheduleRequirements(redflag.parentid, 'redflag', dtfiled, remoteOrg, idx)
	}

	/*---------------------------------------------------------
	* SEND/RECEIVE HANDLERS 
	---------------------------------------------------------*/
	@ProxyMethod
	public void send(syncdata) {
		rptSync.send(syncdata, getActions())
	}

	@ProxyMethod
	public void receive(syncdata) {
		rptSync.receive(syncdata, getActions())
	}

	def getActions(){
		return  [
	    	'REDFLAG-FOR-MUNICIPALITY': [send: getDataToResolve, receive: postDataToResolve],
	    	'REDFLAG-RESOLVED': [send: getResolvedData, receive: postResolvedData],
	    ]
	}

	/*---------------------------------------------------------
	* SUPPORT METHODS
	---------------------------------------------------------*/
	def getDataToResolve = {redflag ->
		return svc.getDataToResolve(redflag)
	}

	def postDataToResolve = {syncdata ->
		def redflag = syncdata.data 
		svc.postDataToResolve(redflag)
		notifyRecommender(syncdata, redflag)
	}

	def getResolvedData = {redflag ->
		return svc.getResolvedData(redflag)
	}

	def postResolvedData = {syncdata ->
		def redflag = syncdata.data 
		notifyFiledBy(syncdata, redflag)
		return svc.postResolvedData(redflag)
	}


	void notifyRecommender(syncdata, redflag){
		def currtask = svc.getCurrentTask(redflag)
		def msg = util.capitalize(currtask.filetype) + ' ' + redflag.refno + ' Red Flag #' + redflag.caseno 
		msg += ' was submitted by ' + redflag.filedby.name 

        def param = [:]
        param.objid = currtask.objid 
        param.sender = syncdata.sender
        param.recipientid = (currtask.assignee.objid ? currtask.assignee.objid : '-')
        param.recipienttype = 'user'
        param.filetype = (currtask?.filetype ? currtask.filetype : '-')
        param.msg = msg
        param.taskid = currtask.objid 
        support.notifyGroup(param)
	}

	void notifyFiledBy(syncdata, redflag){
		def currtask = svc.getCurrentTask(redflag)
		def msg = util.capitalize(currtask.filetype) + ' ' + redflag.refno + ' Red Flag #' + redflag.caseno + ' resolved.'
		def param = [:]
        param.objid = redflag.refid
        param.sender = syncdata.sender
        param.recipientid = redflag.filedby.objid
        param.recipienttype = 'user'
        param.filetype = (currtask?.filetype ? currtask.filetype : '-')
        param.msg = msg
        param.taskid = currtask.objid 
        support.notifyGroup(param)
	}
}
 