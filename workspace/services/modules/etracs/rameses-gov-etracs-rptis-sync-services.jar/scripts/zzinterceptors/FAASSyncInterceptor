import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*


/*----------------------------------------------------------------
* FAAS Synchronization support shared 
* between province and municipalities 
-----------------------------------------------------------------*/
class FAASSyncInterceptor
{
    @Env
    def env

    @Service('FAASSyncService')
    def faasSync 

    @Service('FAASService')
    def faasSvc 


    /*---------------------------------------------------------
    *
    * SCHEDULING SUPPORT
    *
    ---------------------------------------------------------*/

    @After(pattern="FAASService.approveFaas", eval="#{result.datacapture == 1 || result.datacapture == true}", index=50000) 
    public void scheduleDataCapturedFAAS( evt ) {
        def faas = evt.result 
        faasSync.scheduleDataCapturedFAAS(faas)
    }   


    @After(pattern="FAASWorkflowService.signal", eval="#{args[0].state == 'approver' && args[0].action == 'approve'}", index=50000) 
    public void scheduleOnlineApprovedFAAS( evt ) {
        def faas = evt.args[0].data 
        faas.putAll(faasSvc.approveFaas(faas))
        faasSync.scheduleOnlineApprovedFAAS(faas)
    }   

    @After(pattern="FAASWorkflowService.signal", eval="#{args[0].state == 'recommender' && args[0].action == 'submit_to_province'}", index=50000) 
    public void scheduleProvinceApproval( evt ) {
        def faas = evt.args[0].data 
        faasSync.scheduleProvinceApproval(faas)
    }       

    @After(pattern="FAASService.deleteFaas") 
    public void scheduleDeleteFaas( evt ) {
        def faas = evt.args[0]
        if (faas) {
            faasSync.scheduleDeleteFaas(faas)
        }
    }

    @After(pattern="FAASService.revertToInterim") 
    public void scheduleRevertToInterim( evt ) {
        def faas = evt.result
        faasSync.scheduleRevertToInterim(faas)
    }

    @After(pattern="CancelledFAASService.approveFaasCancellation") 
    public void scheduleCancelledFaas( evt ) {
        def cancelledfaas = evt.result
        faasSync.scheduleCancelledFaas(cancelledfaas)
    }



    /*---------------------------------------------------------
    *
    * SEND/RECEIVE HANDLERS
    *
    ---------------------------------------------------------*/
    @After(pattern="RPTMainSyncService.asyncSend", eval="#{result.reftype == 'faas' && result.action.matches('FAAS-.*')}") 
    public void sendData( evt ) {
        def syncdata = evt.result 
        faasSync.send(syncdata)
    }   

    @After(pattern="RPTMainSyncService.receive", eval="#{args[0].reftype == 'faas' && args[0].action.matches('FAAS-.*')}") 
    public void receiveData(evt){
        def syncdata = evt.args[0]
        faasSync.receive(syncdata)
        evt.result.status = 'OK'
    }


}

