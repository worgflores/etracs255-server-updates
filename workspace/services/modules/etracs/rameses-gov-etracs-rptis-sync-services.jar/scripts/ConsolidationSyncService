import com.rameses.annotations.*
import com.rameses.util.*
import com.rameses.services.extended.*

class ConsolidationSyncService
{
	@Env
	def env 

	@Service('DateService')
    def dtSvc

	@Service('RPTMainSyncService')
	def syncSvc 

    @Service('RPTSyncService')
    def rptSync

    @Service('RPTSyncSupport')
    def support

    @Service('ConsolidationService')
    def svc

	@Service('ConsolidationSupportService')
    def consolidationSupport 

	@Service('ConsolidationWorkflowService')
	def workflowSvc

    @DataContext('consolidation')
    def em_consolidation

    @DataContext('consolidation_affectedrpu')
    def em_affectedrpu

    @DataContext('consolidation_task')
    def em_task
	

	/*---------------------------------------------------------
	*
	* SCHEDULING SYNC SUPPORT 
	*
	---------------------------------------------------------*/
	
	@ProxyMethod
	public void scheduleSubmitToProvince(consolidation){
		def dtfiled = dtSvc.serverDate
        def remoteOrg = rptSync.getRemoteOrg(consolidation)
        def idx = 1

        //consolidated faas
        syncSvc.schedule(consolidation.objid, consolidation.newfaasid, 'faas', 'FAAS-DATA', dtfiled, idx++, remoteOrg)

		svc.getAffectedRpus(consolidation.objid).each {
        	syncSvc.schedule(consolidation.objid, it.newfaasid, 'faas', 'FAAS-DATA', dtfiled, idx++, remoteOrg)
        }

        //consolidation
        syncSvc.schedule(consolidation.objid, consolidation.objid, 'consolidation', 'CONSOLIDATION-FORAPPROVAL', dtfiled, idx++, remoteOrg)

        rptSync.scheduleExaminations(consolidation.objid, 'consolidation', dtfiled, remoteOrg, idx)
    	rptSync.scheduleRequirements(consolidation.objid, 'consolidation', dtfiled, remoteOrg, idx)
	}

	@ProxyMethod
	public void scheduleConsolidationApproval(consolidation){
		def dtfiled = dtSvc.serverDate
        def remoteOrg = rptSync.getRemoteOrg(consolidation)
        def idx = 1

        syncSvc.schedule(consolidation.objid, consolidation.newfaasid, 'consolidation', 'CONSOLIDATION-FAAS-APPROVED', dtfiled, idx++, remoteOrg)

		svc.getAffectedRpus(consolidation.objid).each {
        	syncSvc.schedule(consolidation.objid, it.newfaasid, 'consolidation', 'CONSOLIDATION-FAAS-APPROVED', dtfiled, idx++, remoteOrg)
        }

        //consolidation
        syncSvc.schedule(consolidation.objid, consolidation.objid, 'consolidation', 'CONSOLIDATION-APPROVED', dtfiled, idx++, remoteOrg)
	}


	
	/*---------------------------------------------------------
	* SEND/RECEIVE HANDLERS 
	---------------------------------------------------------*/
	@ProxyMethod
	public void send(syncdata) {
		rptSync.send(syncdata, getActions())
	}

	@ProxyMethod
	public void receive(syncdata) {
		rptSync.receive(syncdata, getActions())
	}

	def getActions(){
		return  [
	    	'CONSOLIDATION-FORAPPROVAL': [send: getForApproval, receive: postForApproval],
	    	'CONSOLIDATION-FAAS-APPROVED': [send: getApprovedFaas, receive: postApprovedFaas],
	    	'CONSOLIDATION-APPROVED': [send: getApprovedConsolidation, receive: postApprovedConsolidation],
	    ]
	}

	/*---------------------------------------------------------
	* SUPPORT METHODS
	---------------------------------------------------------*/
	def getForApproval = {consolidation ->
		return consolidationSupport.getForApproval(consolidation)
	}

	def postForApproval = {syncdata ->
		def consolidation = syncdata.data 
		consolidationSupport.postForApproval(consolidation)
		startWorkflow(syncdata, consolidation)
	}

	def getApprovedFaas = {faas ->
		return consolidationSupport.getApprovedFaas(faas)
	}

	def postApprovedFaas = {syncdata ->
		def faas = syncdata.data 
		consolidationSupport.postApprovedFaas(faas)

	}

	def getApprovedConsolidation = {consolidation ->
		return consolidationSupport.getApprovedConsolidation(consolidation)
	}

	def postApprovedConsolidation = {syncdata ->
		def consolidation = syncdata.data 
		consolidationSupport.postApprovedConsolidation(consolidation)

	}


	void startWorkflow(syncdata, consolidation){
		def currtask = em_task.select('objid').where('refid = :objid and enddate is null', consolidation).first()
		if (!currtask) {
			def tasks = workflowSvc.start([refid:consolidation.objid, data:consolidation])
			if (tasks){
				consolidation.taskid = tasks[0].objid
			}
			notifyGroup(syncdata, consolidation)
		}
	}

	void notifyGroup(syncdata, consolidation){
        def param = [:]
        param.objid = consolidation.objid 
        param.sender = syncdata.sender
        param.recipientid = 'assign-receiver'
        param.filetype = 'Consolidation'
        param.msg = 'Consolidation No. ' + consolidation.txnno + ' (assign-receiver) submitted by ' + syncdata.sender.name + '.'
        param.taskid = consolidation.taskid 
        support.notifyGroup(param)
	}
}
 