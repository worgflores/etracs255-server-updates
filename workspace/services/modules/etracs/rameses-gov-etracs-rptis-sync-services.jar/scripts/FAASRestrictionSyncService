import com.rameses.annotations.*
import com.rameses.util.*
import com.rameses.services.extended.*

class FAASRestrictionSyncService
{
	@Env
	def env 

	@Service('DateService')
    def dtSvc

	@Service('RPTMainSyncService')
	def syncSvc 

    @Service('RPTSyncService')
    def rptSync

    @Service('RPTSyncSupport')
    def support

    @Service('FAASRestrictionService')
    def svc

    @DataContext("faas_restriction")
    def em_restriction

	@DataContext("rptledger")
    def em_ledger



	/*---------------------------------------------------------
	*
	* SCHEDULING SYNC SUPPORT 
	*
	---------------------------------------------------------*/

	@ProxyMethod
	public void schedulePostRestriction(restriction){
		def dtfiled = dtSvc.serverDate
        def remoteOrg = rptSync.getRemoteOrg(restriction)
        syncSvc.schedule(restriction.objid, restriction.objid, 'faasrestriction', 'FAAS-RESTRICTION-POST', dtfiled, 1, remoteOrg)
	}

	@ProxyMethod
	public void scheduleDeleteRestriction(restriction){
		def dtfiled = dtSvc.serverDate
        def remoteOrg = rptSync.getRemoteOrg(restriction)
        syncSvc.schedule(restriction.objid, restriction.objid, 'faasrestriction', 'FAAS-RESTRICTION-DELETE', dtfiled, 1, remoteOrg)
	}

	@ProxyMethod
	public void scheduleCancelRestriction(restriction){
		def dtfiled = dtSvc.serverDate
        def remoteOrg = rptSync.getRemoteOrg(restriction)
        syncSvc.schedule(restriction.objid, restriction.objid, 'faasrestriction', 'FAAS-RESTRICTION-CANCEL', dtfiled, 1, remoteOrg)
	}

	@ProxyMethod
	public void scheduleReactivate(restriction){
		def dtfiled = dtSvc.serverDate
        def remoteOrg = rptSync.getRemoteOrg(restriction)
        syncSvc.schedule(restriction.objid, restriction.objid, 'faasrestriction', 'FAAS-RESTRICTION-REACTIVATE', dtfiled, 1, remoteOrg)
	}

	
	/*---------------------------------------------------------
	*
	* SEND/RECEIVE HANDLERS 
	*
	---------------------------------------------------------*/
	@ProxyMethod
	public void send(syncdata) {
		rptSync.send(syncdata, getActions())
	}

	@ProxyMethod
	public void receive(syncdata) {
		rptSync.receive(syncdata, getActions())
	}

	def getActions(){
		return  [
	    	'FAAS-RESTRICTION-POST': [send: getRestriction, receive: postRemoteData],
	    	'FAAS-RESTRICTION-DELETE': [send: getRestriction, receive: postRemoteDelete],
	    	'FAAS-RESTRICTION-CANCEL': [send: getRestriction, receive: postRemoteCancel],
	    	'FAAS-RESTRICTION-REACTIVATE': [send: getRestriction, receive: postRemoteReactivate],
	    ]
	}

	/*---------------------------------------------------------
	*
	* SUPPORT METHODS
	*
	---------------------------------------------------------*/
	def getRestriction = {restriction ->
		return em_restriction.read(restriction)
	}

	def postRemoteData = {syncdata ->
		def restriction = syncdata.data 
		restriction.ledger = getLedger(restriction)
		em_restriction.save(restriction)
	}

	def postRemoteDelete = {syncdata ->
		def restriction = syncdata.data 
		em_restriction.delete(restriction)
	}

	def postRemoteCancel = {syncdata ->
		def restriction = syncdata.data 
		restriction.ledger = getLedger(restriction)
		em_restriction.save(restriction)
	}

	def postRemoteReactivate = {syncdata ->
		def restriction = syncdata.data 
		restriction.ledger = getLedger(restriction)
		em_restriction.save(restriction)
	}

	def getLedger(restriction) {
		if (restriction.ledger) {
			return em_ledger.find([objid: restriction.ledger?.objid]).first()
		}
		return em_ledger.find([faasid: restriction.parent.objid]).first()
	}

}
 