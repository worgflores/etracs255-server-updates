import com.rameses.annotations.*
import com.rameses.util.*
import com.rameses.services.extended.*

class SubdivisionSyncService
{
	@Env
	def env 

	@Service('DateService')
    def dtSvc

	@Service('RPTMainSyncService')
	def syncSvc 

    @Service('RPTSyncService')
    def rptSync

    @Service('RPTSyncSupport')
    def support

    @Service('SubdivisionService')
    def svc

	@Service('SubdivisionSupport2Service')
    def subdivisionSupport 

	@Service('SubdivisionWorkflowService')
	def workflowSvc

    @DataContext('subdivision')
    def em_subdivision

    @DataContext('subdivision_motherland')
    def em_motherland

    @DataContext('subdivision_subdividedland')
    def em_subdividedland

    @DataContext('subdivision_affectedrpu')
    def em_affectedrpu

	@DataContext('subdivision_cancelledimprovement')
    def em_cancelledimprovement

    @DataContext('subdivision_task')
    def em_task
	

	/*---------------------------------------------------------
	*
	* SCHEDULING SYNC SUPPORT 
	*
	---------------------------------------------------------*/
	
	@ProxyMethod
	public void scheduleSubmitToProvince(subdivision){
		def dtfiled = dtSvc.serverDate
        def remoteOrg = rptSync.getRemoteOrg(subdivision)
        def idx = 1

        //subdivision faases
        em_subdividedland.find([subdivisionid: subdivision.objid]).list().each {
        	syncSvc.schedule(subdivision.objid, it.newfaasid, 'faas', 'FAAS-DATA', dtfiled, idx++, remoteOrg)
        }

		em_affectedrpu.find([subdivisionid: subdivision.objid]).list().each {
        	syncSvc.schedule(subdivision.objid, it.newfaasid, 'faas', 'FAAS-DATA', dtfiled, idx++, remoteOrg)
        }

        //subdivision
        syncSvc.schedule(subdivision.objid, subdivision.objid, 'subdivision', 'SUBDIVISION-FORAPPROVAL', dtfiled, idx++, remoteOrg)

        rptSync.scheduleExaminations(subdivision.objid, 'subdivision', dtfiled, remoteOrg, idx)
    	rptSync.scheduleRequirements(subdivision.objid, 'subdivision', dtfiled, remoteOrg, idx)
	}

	@ProxyMethod
	public void scheduleSubdivisionApproval(subdivision){
		def dtfiled = dtSvc.serverDate
        def remoteOrg = rptSync.getRemoteOrg(subdivision)
        def idx = 1

        //subdivision faases
        em_subdividedland.find([subdivisionid: subdivision.objid]).list().each {
        	syncSvc.schedule(subdivision.objid, it.newfaasid, 'subdivision', 'SUBDIVISION-FAAS-APPROVED', dtfiled, idx++, remoteOrg)
        }

		em_affectedrpu.find([subdivisionid: subdivision.objid]).list().each {
        	syncSvc.schedule(subdivision.objid, it.newfaasid, 'subdivision', 'SUBDIVISION-FAAS-APPROVED', dtfiled, idx++, remoteOrg)
        }

        //subdivision
        syncSvc.schedule(subdivision.objid, subdivision.objid, 'subdivision', 'SUBDIVISION-APPROVED', dtfiled, idx++, remoteOrg)
	}

	@ProxyMethod
	public void scheduleSubdivisionDisapproval(subdivision){
		def dtfiled = dtSvc.serverDate
        def remoteOrg = rptSync.getRemoteOrg(subdivision)
        def idx = 1

        //subdivision
        syncSvc.schedule(subdivision.objid, subdivision.objid, 'subdivision', 'SUBDIVISION-DISAPPROVAL', dtfiled, idx++, remoteOrg)
	}

	
	/*---------------------------------------------------------
	* SEND/RECEIVE HANDLERS 
	---------------------------------------------------------*/
	@ProxyMethod
	public void send(syncdata) {
		rptSync.send(syncdata, getActions())
	}

	@ProxyMethod
	public void receive(syncdata) {
		rptSync.receive(syncdata, getActions())
	}

	def getActions(){
		return  [
	    	'SUBDIVISION-FORAPPROVAL': [send: getForApproval, receive: postForApproval],
	    	'SUBDIVISION-FAAS-APPROVED': [send: getApprovedFaas, receive: postApprovedFaas],
	    	'SUBDIVISION-APPROVED': [send: getApprovedSubdivision, receive: postApprovedSubdivision],
	    	'SUBDIVISION-DISAPPROVAL': [send: getDisapprovedSubdivision, receive: postDisapprovedSubdivision],
	    ]
	}

	/*---------------------------------------------------------
	* SUPPORT METHODS
	---------------------------------------------------------*/
	def getForApproval = {subdivision ->
		return subdivisionSupport.getForApproval(subdivision)
	}

	def postForApproval = {syncdata ->
		def subdivision = syncdata.data 
		subdivisionSupport.postSubdivisionData(subdivision)
		startWorkflow(syncdata, subdivision)
	}


	def getApprovedFaas = {faas ->
		return subdivisionSupport.getApprovedFaas(faas)
	}

	def postApprovedFaas = {syncdata ->
		def faas = syncdata.data 
		subdivisionSupport.postApprovedFaas(faas)

	}

	def getApprovedSubdivision = {subdivision ->
		return svc.open(subdivision)
	}

	def postApprovedSubdivision = {syncdata ->
		def subdivision = syncdata.data 
		subdivisionSupport.postApprovedSubdivision(subdivision)

	}
	
	def getDisapprovedSubdivision = {subdivision ->
		return subdivision
	}

	def postDisapprovedSubdivision = {syncdata ->
		def subdivision = syncdata.data 
		subdivisionSupport.postDisapprovedSubdivision(subdivision)

	}


	void startWorkflow(syncdata, subdivision){
		def currtask = em_task.select('objid').where('refid = :objid and enddate is null', subdivision).first()
		if (!currtask) {
			def tasks = workflowSvc.start([refid:subdivision.objid, data:subdivision])
			if (tasks){
				subdivision.taskid = tasks[0].objid
			}
			notifyGroup(syncdata, subdivision)
		}
	}

	void notifyGroup(syncdata, subdivision){
        def param = [:]
        param.objid = subdivision.objid 
        param.sender = syncdata.sender
        param.recipientid = 'assign-receiver'
        param.filetype = 'subdivision'
        param.msg = 'Subdivision No. ' + subdivision.txnno + ' (assign-receiver) submitted by ' + syncdata.sender.name + '.'
        param.taskid = subdivision.taskid 
        support.notifyGroup(param)
	}
}
 