import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*

class ProvinceFAASARestrictionInterceptor
{
	@Env
	def env

    @Service('RPTCloudNotificationService')
    def svc

    @DataContext('faas')
    def em_faas 

    @After(pattern="FAASRestrictionService.approve", index=50000) 
    public void submitApprovedRestrictionToMunicipality( evt ) {
        def restriction = evt.result 
        def asyncreq = svc.createAsyncRequest('MunicipalityFAASRestrictionRemoteService', 'postRestriction', restriction)
        svc.sendAsyncMessage(asyncreq[0], getLguId(restriction))
    }   

    @After(pattern="FAASRestrictionService.removeRestriction", eval="#{args[0].state != 'DRAFT'}", index=50000) 
    public void submitRemoveRestrictionToMunicipality( evt ) {
        def restriction = evt.args[0]
        def asyncreq = svc.createAsyncRequest('MunicipalityFAASRestrictionRemoteService', 'postRemoveRestriction', restriction)
        svc.sendAsyncMessage(asyncreq[0], getLguId(restriction))
    }   

    @After(pattern="RPTReceiptService.cancelRestriction", eval="#{result.restrictions.size() > 0}", index=50000) 
    public void submitCancelRestrictionToMunicipality( evt ) {
        def restrictions = evt.result
        def asyncreq = svc.createAsyncRequest('MunicipalityFAASRestrictionRemoteService', 'postCancelRestrictions', restrictions)
        svc.sendAsyncMessage(asyncreq[0], getLguId(restrictions[0]))
    }   

    def getLguId(restriction){
        def faas = em_faas.select('lguid').find([objid:restriction.parent.objid]).first()
        if(!faas)
            throw new Exception('FAAS ' + restriction.parent.tdno + ' does not exist or has already been deleted.') 
        if(!faas.lguid)
            throw new Exception('FAAS ' + restriction.parent.tdno + ' lguid is  not set.') 
        return faas.lguid 
    }
}

