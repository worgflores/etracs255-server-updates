import com.rameses.annotations.*;

import treasury.utils.*;
import treasury.facts.*;
import enterprise.utils.*;
import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import java.util.*;
import enterprise.facts.Org;

public class CashReceiptComputeShareInterceptor {
	
	@Service("RevenueSharingService")
   	def sharingSvc;

	@DataContext('sys_org') 
	def sys_org;


	@Before(pattern="(Cash|Noncash)ReceiptService.post",  index=50)
	public void computeShare(def evt) {
		def p = evt.args[0];

		/***************************************************************
		//do the sharing here. Just proceed if there are errors 
		****************************************************************/
		def sharing = sharingSvc.execute( p );
		if(sharing) {
			if(!p.sharing) p.sharing = [];
			p.sharing.addAll( sharing );
		} 
	}


	@After(pattern="FactBuilderService.getFacts", eval="#{ args[0].rulename == 'revenuesharing'  }")
	public void buildFacts(def evt) {
		def factBuilder = evt.result; 
		def rct = evt.args[0].params;
		def facts = factBuilder.facts;

		if ( rct.receiptdate instanceof String ) {
			rct.receiptdate = java.sql.Date.valueOf( rct.receiptdate );  
		} 

		facts << new CashReceipt( receiptdate: rct.receiptdate ); 
		if( rct.org?.objid ) {
			def org = sys_org.find([ objid: rct.org.objid ]).first(); 
			facts << new Org( orgid: org.objid, type: org.orgclass, root: (org.root==1)); 
		}
		
		factBuilder.addBillItems( rct.items );

		/*
		if( rct.collectiongroup &&  !facts.find{it.class == treasury.facts.CollectionGroup.class } ) {
			def cg = params.collectiongroup;
			facts << new treasury.facts.CollectionGroup( objid:cg.objid, name: cg.name );
		}
		*/
	}

}